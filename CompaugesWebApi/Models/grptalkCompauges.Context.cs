//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CompaugesWebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GTStagingNewEntities : DbContext
    {
        public GTStagingNewEntities()
            : base("name=GTStagingNewEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CompuageRole> CompuageRoles { get; set; }
        public virtual DbSet<Compuage> Compuages { get; set; }
        public virtual DbSet<CompuageLogin> CompuageLogins { get; set; }
        public virtual DbSet<AdWordLead> AdWordLeads { get; set; }
        public virtual DbSet<LeadStage> LeadStages { get; set; }
        public virtual DbSet<CompuageUserDetail> CompuageUserDetails { get; set; }
    
        public virtual ObjectResult<GetAllCompaugeUsers_Result> GetAllCompaugeUsers(Nullable<byte> mode, string fromDate, string toDate, string searchInput, ObjectParameter retVal, ObjectParameter retMsg)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("searchInput", searchInput) :
                new ObjectParameter("searchInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompaugeUsers_Result>("GetAllCompaugeUsers", modeParameter, fromDateParameter, toDateParameter, searchInputParameter, retVal, retMsg);
        }
    
        public virtual ObjectResult<GetAllCompaugeUsers_Result> compaugeUsers(Nullable<byte> mode, string fromDate, string toDate, string searchInput, ObjectParameter retVal, ObjectParameter retMsg)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("searchInput", searchInput) :
                new ObjectParameter("searchInput", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCompaugeUsers_Result>("compaugeUsers", modeParameter, fromDateParameter, toDateParameter, searchInputParameter, retVal, retMsg);
        }
    
        public virtual int ManageCompaugeUser(Nullable<byte> mode, Nullable<int> compId, string username, string password, string confirmPassword, string cipherKey, string name, string mobile, string email, Nullable<int> createdby, Nullable<byte> roleId, ObjectParameter retVal, ObjectParameter retMsg)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("compId", compId) :
                new ObjectParameter("compId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("confirmPassword", confirmPassword) :
                new ObjectParameter("confirmPassword", typeof(string));
    
            var cipherKeyParameter = cipherKey != null ?
                new ObjectParameter("CipherKey", cipherKey) :
                new ObjectParameter("CipherKey", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageCompaugeUser", modeParameter, compIdParameter, usernameParameter, passwordParameter, confirmPasswordParameter, cipherKeyParameter, nameParameter, mobileParameter, emailParameter, createdbyParameter, roleIdParameter, retVal, retMsg);
        }
    
        public virtual int ManageCompUser(Nullable<byte> mode, Nullable<int> compId, string username, string password, string confirmPassword, string cipherKey, string name, string mobile, string email, Nullable<int> createdby, Nullable<byte> roleId, ObjectParameter retVal, ObjectParameter retMsg)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            var compIdParameter = compId.HasValue ?
                new ObjectParameter("compId", compId) :
                new ObjectParameter("compId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var confirmPasswordParameter = confirmPassword != null ?
                new ObjectParameter("confirmPassword", confirmPassword) :
                new ObjectParameter("confirmPassword", typeof(string));
    
            var cipherKeyParameter = cipherKey != null ?
                new ObjectParameter("CipherKey", cipherKey) :
                new ObjectParameter("CipherKey", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("roleId", roleId) :
                new ObjectParameter("roleId", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ManageCompUser", modeParameter, compIdParameter, usernameParameter, passwordParameter, confirmPasswordParameter, cipherKeyParameter, nameParameter, mobileParameter, emailParameter, createdbyParameter, roleIdParameter, retVal, retMsg);
        }
    
        public virtual ObjectResult<ManageCompaugeLeads_Result> ManageCompaugeLeads(Nullable<byte> mode, string compId, string searchInput, string deals, string leadStages, string fromDate, string toDate, string resellerNames, string companyName, string conatactName, string mobile, string email, string address, string comments, Nullable<int> stageID, string leadName, Nullable<int> leadId, ObjectParameter retVal, ObjectParameter retMsg)
        {
            var modeParameter = mode.HasValue ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(byte));
    
            var compIdParameter = compId != null ?
                new ObjectParameter("compId", compId) :
                new ObjectParameter("compId", typeof(string));
    
            var searchInputParameter = searchInput != null ?
                new ObjectParameter("SearchInput", searchInput) :
                new ObjectParameter("SearchInput", typeof(string));
    
            var dealsParameter = deals != null ?
                new ObjectParameter("Deals", deals) :
                new ObjectParameter("Deals", typeof(string));
    
            var leadStagesParameter = leadStages != null ?
                new ObjectParameter("leadStages", leadStages) :
                new ObjectParameter("leadStages", typeof(string));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(string));
    
            var resellerNamesParameter = resellerNames != null ?
                new ObjectParameter("resellerNames", resellerNames) :
                new ObjectParameter("resellerNames", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var conatactNameParameter = conatactName != null ?
                new ObjectParameter("ConatactName", conatactName) :
                new ObjectParameter("ConatactName", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("mobile", mobile) :
                new ObjectParameter("mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("stageID", stageID) :
                new ObjectParameter("stageID", typeof(int));
    
            var leadNameParameter = leadName != null ?
                new ObjectParameter("leadName", leadName) :
                new ObjectParameter("leadName", typeof(string));
    
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("LeadId", leadId) :
                new ObjectParameter("LeadId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ManageCompaugeLeads_Result>("ManageCompaugeLeads", modeParameter, compIdParameter, searchInputParameter, dealsParameter, leadStagesParameter, fromDateParameter, toDateParameter, resellerNamesParameter, companyNameParameter, conatactNameParameter, mobileParameter, emailParameter, addressParameter, commentsParameter, stageIDParameter, leadNameParameter, leadIdParameter, retVal, retMsg);
        }
    }
}
